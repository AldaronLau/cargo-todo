{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4","program":"/home/clement/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","string_parser","--edition=2018","/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8cdda1347b438185","-C","extra-filename=-8cdda1347b438185","--out-dir","/home/clement/Documents/Dev/cargo-todo/target/rls/debug/deps","-L","dependency=/home/clement/Documents/Dev/cargo-todo/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/clement/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/clement/Documents/Dev/cargo-todo/target/rls/debug/deps/libstring_parser-8cdda1347b438185.rmeta"},"prelude":{"crate_id":{"name":"string_parser","disambiguator":[5490063999916950734,15217708505853671098]},"crate_root":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src","external_crates":[{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7620319826054890005,5717302534568989792]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4475606148663180750,5419346832002689975]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18209801913766412741,14708739502762596590]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17534900064032465835,11074003829314630197]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5259792513756561775,1479263106690228407]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14346116818397650781,2977216825120829807]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3936655635976934790,16389253933182331078]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5174545163365617014,15822577537272331306]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1537777832242498626,9514621648460519184]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[18358940337312830879,10081988574518201852]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[12121062121650459058,11489301800313262789]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14319052529584542008,1066639489166686923]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9012578297089494616,4116522626272880912]}},{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8611561841149342373,8229239553347846203]}}],"span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":0,"byte_end":5325,"line_start":1,"line_end":178,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":0,"byte_end":5325,"line_start":1,"line_end":178,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10}],"decl_id":null,"docs":" # string_parser\n \n string_parser is a crate that find tokens in source files and parse the inside<br/> \n","sig":null,"attributes":[{"value":"! # string_parser","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"! ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":20,"byte_end":24,"line_start":2,"line_end":2,"column_start":1,"column_end":5}},{"value":"! string_parser is a crate that find tokens in source files and parse the inside<br/> ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":25,"byte_end":113,"line_start":3,"line_end":3,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":7},"span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1823,"byte_end":1836,"line_start":73,"line_end":73,"column_start":8,"column_end":21},"name":"string_parser","qualname":"::string_parser","value":"fn (path: &str, text: &str, end_filter: impl Fn(Vec<char>) -> bool, mut callback: impl FnMut(String)) -> Result<(), io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Main function of the create\n # Arguments\n * `path` - the path to the file to search from\n * `text` - the text to search\n * `end_filter` - the function called at each character to check if we're still within the token. Sould return true when out of the token.\n * `callback` - the function called when the text is exited. take the inside of the token as argument\n # Examples\n ./text being \"...'foo'...\"\n ```no_run\n extern crate string_parser;\n use string_parser::string_parser; \n \n fn end_filter(c : Vec<char>) -> bool{            \n     if c.last().unwrap()== &'\\'' {\n         return true;\n         }\n     else {\n         return false;\n         }   \n }\n //can also use closures\n let callback = |s : String| {\n     assert_eq!(String::from(\"foo\"), s); \n };\n \n string_parser(\"./text\", \"'\", end_filter, callback).unwrap();\n","sig":null,"attributes":[{"value":"/ Main function of the create","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":920,"byte_end":951,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ # Arguments","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":952,"byte_end":967,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/ * `path` - the path to the file to search from","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":968,"byte_end":1018,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * `text` - the text to search","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1019,"byte_end":1052,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ * `end_filter` - the function called at each character to check if we're still within the token. Sould return true when out of the token.","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1053,"byte_end":1194,"line_start":51,"line_end":51,"column_start":1,"column_end":142}},{"value":"/ * `callback` - the function called when the text is exited. take the inside of the token as argument","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1195,"byte_end":1299,"line_start":52,"line_end":52,"column_start":1,"column_end":105}},{"value":"/ # Examples","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1300,"byte_end":1314,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ./text being \"...'foo'...\"","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1315,"byte_end":1345,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ ```no_run","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1346,"byte_end":1359,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/ extern crate string_parser;","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1360,"byte_end":1391,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ use string_parser::string_parser; ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1392,"byte_end":1430,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1431,"byte_end":1435,"line_start":58,"line_end":58,"column_start":1,"column_end":5}},{"value":"/ fn end_filter(c : Vec<char>) -> bool{            ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1436,"byte_end":1489,"line_start":59,"line_end":59,"column_start":1,"column_end":54}},{"value":"/     if c.last().unwrap()== &'\\'' {","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1490,"byte_end":1528,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/         return true;","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1529,"byte_end":1553,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/         }","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1554,"byte_end":1567,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/     else {","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1568,"byte_end":1582,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/         return false;","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1583,"byte_end":1608,"line_start":64,"line_end":64,"column_start":1,"column_end":26}},{"value":"/         }   ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1609,"byte_end":1625,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1626,"byte_end":1631,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ //can also use closures","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1632,"byte_end":1659,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/ let callback = |s : String| {","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1660,"byte_end":1693,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/     assert_eq!(String::from(\"foo\"), s); ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1694,"byte_end":1738,"line_start":69,"line_end":69,"column_start":1,"column_end":45}},{"value":"/ };","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1739,"byte_end":1745,"line_start":70,"line_end":70,"column_start":1,"column_end":7}},{"value":"/ ","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1746,"byte_end":1750,"line_start":71,"line_end":71,"column_start":1,"column_end":5}},{"value":"/ string_parser(\"./text\", \"'\", end_filter, callback).unwrap();","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":1751,"byte_end":1815,"line_start":72,"line_end":72,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":10},"span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":3543,"byte_end":3566,"line_start":122,"line_end":122,"column_start":8,"column_end":31},"name":"string_parser_with_line","qualname":"::string_parser_with_line","value":"fn (path: &str, text: &str, end_filter: impl Fn(Vec<char>) -> bool, mut callback: impl FnMut(String, usize)) -> Result<(), io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Like [string_parser](./fn.string_parser.html) but the callback function also take the line number as arguments\n","sig":null,"attributes":[{"value":"/Like [string_parser](./fn.string_parser.html) but the callback function also take the line number as arguments","span":{"file_name":"/home/clement/.cargo/registry/src/github.com-1ecc6299db9ec823/string-parser-0.1.4/src/lib.rs","byte_start":3422,"byte_end":3535,"line_start":121,"line_end":121,"column_start":1,"column_end":114}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}